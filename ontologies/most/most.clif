/*******************************************************************************
* Copyright (c) University of Toronto and others. All rights reserved.
* The content of this file is licensed under the Creative Commons Attribution-
* ShareAlike 3.0 Unported license. The legal text of this license can be
* found at http://creativecommons.org/licenses/by-sa/3.0/legalcode.
*
* Contributors:
* Carmen Chui, Michael Gruninger
*******************************************************************************/

(cl-text http://colore.oor.net/most/most.clif

(cl-imports http://colore.oor.net/molecular_graph/definitions/most_elements.clif)
(cl-imports http://colore.oor.net/molecular_graph/definitions/most_bonds.clif)

(cl-comment 'CLIF file containing all of the MoSt ontology axioms.  We will modularize this later.')

/*******************************************************************************/
(cl-comment '======= SEMANTIC CONDITION: most - basic intuitions =======')
/*******************************************************************************/

(forall (x)
	(mol x x))
	
(forall (x y)
	(if (mol x y)
		(mol y x)))
		
(forall (x y)
	(if (and (mol x y)(atom x)(atom y))
		(= x y)))

(forall (x y)
	(if (and (mol x y)(bond x)(bond y))
		(= x y)))
		
(forall (x y)
	(if (and (mol x y)(group x)(group y))
		(= x y)))
		
(forall (x y)
	(if (and (mol x y)(skeleton x)(skeleton y))
		(= x y)))
		
(cl-comment 'Disjointness axioms for atom(x), bond(x), group(x), and skeleton(x).')
(forall (x)
	(if (skeleton x)
		(not (or (atom x)(bond x)(group x)))))

(forall (x)
	(if (atom x)
		(not (or (bond x)(group x)))))

(forall (x)
	(if (bond x)
		(not (group x))))

(cl-comment 'For every functional group, there exists an atom that is in the group.')
(forall (x)
	(if (group x)
		(exists (a)
			(and (atom a)(mol a x)))))

(cl-comment 'Every atom is in a functional group.')
(forall (x)
	(if	(atom x)
		(exists (y)
			(and (group y)(mol x y)))))

(cl-comment 'Every atom has a bond with an atom in a functional group.')
(forall (x)
    (if (atom x)
        (exists (b y z)
            (and (bond b)(group y)(atom z)(not (= x z))
            	(mol x b)(mol z b)(mol z y)))))

(cl-comment 'Transitive relation to indicate that any bond between two atoms in a group implies that the atom is in the group.')
(forall (b g x y)
    (if (and (atom x)(atom y)(not (= x y))(bond b)(group g)
    		(mol x b)(mol y b)(mol b g))
        (mol x g)))

(cl-comment 'If an atom is in a bond that is in a functional group, then the atom is in the functional group.')
(forall (x y z)
    (if (and (atom x)(bond y)(group z)(mol x y)(mol y z))
        (mol x z)))

(cl-comment 'A functional group has at most two ends.')
(forall (x y z w)
	(if	(and	(group x)
			(end y x)
			(end z x)
			(end w x))
		(or	(= y z)
			(= y w)
			(= z w))))

(cl-comment 'No functional group has a fork.')
(forall (x)
	(if	(group x)
		(not (exists (y)
			(fork y)))))

(cl-comment 'For all bonds that have the same atoms, the bonds are in the same group.')
(forall (a1 a2 a3 a4 b1 b2 g)
	(if (and (atom a1)(atom a2)(atom a3)(atom a4)
			(group g)
			(mol b1 g)
			(mol a1 b1)(mol a2 b1)
			(mol a3 b2)(mol a4 b2)
			(= a1 a3)(= a2 a4))
		(mol b2 g)))

(cl-comment 'A sentence to describe that functional groups contain bonds.')
(forall (y)
    (if (group y)
        (exists (x)
            (and (atom x)(mol x y)))))

(cl-comment 'If two atoms are in a group and have a bond between each other, then the bond is in the functional group.')
(forall (x y b g)
    (if (and (atom x)(atom y)(bond b)(group g)(not (= x y))
    		(mol x y)(mol y g)(mol x b)(mol y b))
        (mol b g)))

(cl-comment 'most version of planar shadow axiom in tripartite incidence')
(forall (b g)
	(if	(and (bond b)(group g)(not (mol b g)))
		(exists (a)
			(and (atom a)(mol a b)
				(not (mol a g))))))

/*******************************************************************************/
(cl-comment '========== MOST_ROOT DEFINITIONS ==========')
/*******************************************************************************/

(cl-comment 'Definition for chain.')
(forall (x)
	(iff (chain x)
		(and (group x)
			(exists (y)
				(and (end y x)
					(forall (w)
						(if (and (atom w)(mol w x))
							(not (fork w)))))))))

(cl-comment 'Definition for ring.')
(forall (x)
	(iff (ring x)
		(and (group x)
			(forall (y)
				(if (and (atom y)(mol y x))
					(and (not (end y x))(not (fork y))))))))
				
(cl-comment 'Definition for an end atom in a linear functional group.')
(forall (x y)
	(iff (end x y)
		(and (atom x)(group y)(mol x y)
			(forall (b1 b2 w z)
				(if (and (bond b1)(bond b2)(atom w)(atom z)
						(mol x b1)(mol z b1)
						(mol x b2)(mol w b2)
						(mol z y)(mol w y))
					(= w z))))))

(cl-comment 'Definition for a fork atom in a branched functional group: an atom in the same functional group has at least 3 other atoms in bonds.')
(forall (x y)
	(iff (fork x)
		(and (atom x)
			(exists (b1 b2 b3 a1 a2 a3)
				(and (atom a1)(atom a2)(atom a3)
					(bond b1)(bond b2)(bond b3)
					(not (= a1 a2))(not (= a2 a3))(not (= a1 a3))
					(not (= b1 b2))(not (= b2 b3))(not (= b1 b3))
					(mol x b1)(mol a1 b1)
					(mol x b2)(mol a2 b2)
					(mol x b3)(mol a3 b3))))))

					
(cl-comment 'A saturated functional group is one that has at least one single bond.')
(forall (x)
	(iff (saturated x)
		(and (group x)
			(forall (b y z)
			(if (and (bond b)(atom y)
					(mol y b)(mol z b)
					(mol y x)(mol z x))
				(singlebond b y z))))))

(cl-comment 'An unsaturated functional group is one that has at least one double bond.')
(forall (x)
	(iff (unsaturated x)
		(and (group x)
		(exists (b y z)
			(if (and (atom y)(bond b)
					(mol y b)(mol z b)
					(mol y x)(mol z x))
				(doublebond b y z))))))

(cl-comment 'Alternating Group Definition: each atom is in a single and a double bond with another atom in the functional group.')
(forall (x y)
	(iff (alternating_group x)
		(if (and (group x)(atom y)(mol x y))
			(exists (a1 a2 b1 b2)
				(and (atom a1)(atom a2)
					(bond b1)(bond b2)
					(mol y b1)(mol a1 b1)
					(doublebond b2 y a2)
					(mol a1 x)(mol a2 x))))))

(cl-comment 'Trivial Group: a functional group for single atoms.')
(forall (x)
	(iff (trivialgroup x)
		(and (group x)
			(forall (y z)
				(if (and (atom y)(atom z)(mol y x)(mol z x))
					(= y z))))))

/*******************************************************************************/
(cl-comment '======= SEMANTIC CONDITION: attachment axioms')
/*******************************************************************************/

(cl-comment 'most version of twin junction in tripartite incidence')
(forall (b g1 g2)
	(if	(and (group g1)(group g2)(not (= g1 g2))
			(bond b)(mol b g1)(mol b g2))
		(exists (a1 a2)
			(and	(spiro g1 g2 a1)
				(spiro g1 g2 a2)
				(not (= a1 a2))))))

(forall (a1 a2 a3 b g1 g2)
	(if	(and (atom a1)(atom a2)(atom a3)
			(group g1)(group g2)(not (= g1 g2))
			(bond b)
			(mol b g1)
			(mol b g2)
			(spiro g1 g2 a1)
			(spiro g1 g2 a2)
			(spiro g1 g2 a3))
		(or	(= a1 a2)
			(= a1 a3)
			(= a2 a3))))

(cl-comment '==================================')
(cl-comment 'FUSION')
(cl-comment 'Fusion Connection')
(cl-comment 'Two distinct atoms are shared between the groups which are in a bond.')
(cl-comment '==================================')

(forall (a1 a2 a3 g1 g2)
    (if (and (fusedAtom a1 g1 g2)(fusedAtom a1 g1 g2)(fusedAtom a3 g1 g2))
        (or (= a1 a2)(= a1 a3)(= a2 a3))))

(cl-comment 'Something we should be able to prove.')
(forall (g1 g2)
    (if (fused g1 g2)
        (exists (a1 a2)
            (and (fusedAtom a1 g1 g2)
            	(fusedAtom a2 g1 g2)
            	(not (= a1 a2))))))

(cl-comment '==================================')
(cl-comment 'SPIRO')
(cl-comment 'Spiro Connection')
(cl-comment 'An atom is shared')
(cl-comment '==================================')

(cl-comment 'Uniqueness of spiro connection.')
(exists (a1)
    (forall (g1 g2 a2)
        (if (and (spiro g1 g2 a1)(spiro g1 g2 a2))
        (= a1 a2))))

(cl-comment '==================================')
(cl-comment 'TETHER')
(cl-comment 'Tether Connection')
(cl-comment 'No atoms are shared')
(cl-comment 'Groups are bonded together by a bond between each group')
(cl-comment '==================================')

(cl-comment 'Uniqueness of tether connection.')
(exists (b1)
    (forall (g1 g2 b2)
        (if (and (tether g1 g2 b1)(tether g1 g2 b2))
        (= b1 b2))))

(cl-comment 'enforce unique fusion')
(cl-comment 'If two rings share more than one bond, then they are connected by tethering.')
(forall (g1 g2 b1 b2)
	(if (and (ring g1)(ring g2)
		(not (= g1 g2))(not (= b1 b2))
		(bond b1)(bond b2)
		(mol b1 g1)(mol b1 g2)
		(mol b1 g2)(mol b2 g2))
		(and (tether g1 g2 b1)(tether g1 g2 b2))))

(cl-comment 'most version of weak face intersect in tripartite incidence')
(forall (g1 g2 a1 a2)
	(if	(and	(group g1)
			(group g2)
			(atom a1)
			(atom a2)
			(not (= a1 a2))
			(not (= g1 g2))
			(mol a1 g1)
			(mol a1 g2)
			(mol a2 g1)
			(mol a2 g2))
		(exists (b)
			(and (bond b)(mol b g1)(mol b g2)))))
		
		
(cl-comment 'There do not exist two functional groups x and y, and 3 atoms such that those three atoms are in functional groups x and y.')
(cl-comment 'Any two functional groups intersect at AT MOST two atoms.')
(not (exists (x y a b c)
	(and (group x)
			(group y)
			(atom a)
			(atom b)
			(atom c)
			(mol a x)(mol b x)(mol c x)
			(mol a y)(mol b y)(mol c y)
			(not (= x y))
			(not (= a b))
			(not (= b c))
			(not (= a c)))))

(cl-comment 'If there are two distinct functional groups, there exists an atom that is only in one of the groups and not the other.')
(forall (x y)
	(if (and (group x)(group y)(not (= x y)))
		(exists (a)
			(and (atom a)(mol a x)(not (mol a y))))))

(cl-comment 'If two functional groups intersect at two distinct atoms, then the atoms are in the same bond.')
(forall (g1 g2 a1 a2)
	(if (and (atom a1)(atom a2)
			(group g1)(group g2)
			(not (= a1 a2))(not (= g1 g2))
			(mol a1 g1)(mol a1 g2)
			(mol a2 g1)(mol a2 g2))
			(exists (b)
				(and (bond b)
					(mol b g1)(mol b g2)
					(mol a1 b)(mol a2 b)))))

(cl-comment 'Functional groups cannot be coextensive.')
(cl-comment 'Two groups cannot have the exact same set of atoms.')
(forall (g1 g2 a1 a2)
	(if (and (group g1)(group g2)(not (= g1 g2))
			(atom a1)(atom a2)(not (= a1 a2))
			(mol a1 g1)(mol a2 g2))
		(and (not (mol a1 g2))(not (mol a2 g1)))))

/*******************************************************************************/
(cl-comment '========== MOST_ATTACHMENT DEFINITIONS ==========')
/*******************************************************************************/

(forall (g1 g2)
    (iff (fused g1 g2)
    	(and (group g1)(group g2)(not (= g1 g2))
    		(exists (a1 a2 b)
    			(and (atom a1)(atom a2)(not (= a1 a2))
    				(mol a1 b)(mol a2 b)
    				(mol a1 g1)(mol a1 g2)
    				(mol a2 g1)(mol a2 g2)
    				(mol b g1)(mol b g2))))))

(cl-comment 'Definition of fused atom - an atom that is in bonds of different groups.')
(forall (a1 g1 g2)
    (iff (fusedAtom a1 g1 g2)
        (and (atom a1)(group g1)(group g2)
        	(mol a1 g1)(mol a1 g2)
        	(not (= g1 g2))
            (exists (b1 b2)
                (and (bond b1)(bond b2)
                	(mol a1 b1)(mol a1 b2)
                	(mol b1 g1)(mol b2 g2))))))

(forall (g1 g2 a)
    (iff (spiro g1 g2 a)
    	(and (group g1)(group g2)(atom a)(not (= g1 g2))
    		(exists (b1 b2)
				(and (bond b1)(bond b2)
					(mol a g1)(mol a g2)
					(mol a b1)(mol a b2)
					(mol b1 g1)(not (mol b1 g2))
					(mol b2 g2)(not (mol b2 g1)))))))

(forall (g1 g2 b)
    (iff (tether g1 g2 b)
            (and (group g1)(group g2)(bond b)(not (= g1 g2))
            	(exists (a1 a2)
					(and (atom a1)(atom a2)
						(mol a1 g1)(mol a2 g2)
						(mol a1 b)(mol a2 b)
						(not (mol b g1))(not (mol b g2)))))))

(forall (x)
	(iff (bridge x)
		(exists (y)
			(and (ring y)(chain x)
				(exists (a) (and (atom a)(spiro x y a)))
				(exists (b) (and (bond b)(tether x y b)))))))

(cl-comment 'Definition: A relation to handle bridges -- for two bonds that intersect, there exists an atom that is in both bonds, and the bonds are not equivalent.')
(forall (b1 b2)
	(iff (intersects b1 b2)
		(exists (a)
			(and (atom a)
				(mol a b1)
				(mol a b2)
				(not (= b1 b2))))))
				
(forall (g1 g2)
	(iff (attached g1 g2)
		(or (fused g1 g2)
			(exists (a) (spiro g1 g2 a))
			(exists (b) (tether g1 g2 b)))))

(cl-comment 'Part: Two functional groups are part of each other if they share a common atom. COMMENT BY CARMEN MAYBE RENAME?')
(forall (g1 g2)
    (iff (part g1 g2)
        (and (group g1)(group g2)(not (= g1 g2))
            (forall (x)
                (if (and (atom x)(mol x g1))
                    (mol x g2))))))
						
/*******************************************************************************/
(cl-comment '======= SEMANTIC CONDITION: ringBond - remaining paths are chains')
/*******************************************************************************/

(forall (b)
	(if (ringBond b)
		(exists (g)
			(and (mol b g)(ring g)))))

(cl-comment 'Every ring bond is in a unique ring.')
(forall (b1 b2 g1 g2)
	(if (and (ringBond b1)(ringBond b2)
			(group g1)(group g2)
			(ring g1)(ring g2)
			(mol b1 g1)(mol b1 g2)
			(mol b1 g2)(mol b2 g2))
		(or (= b1 b2)(= g1 g2))))

(cl-comment 'Every ring bond is in at most one ring.')
(forall (b g1 g2)
	(if (and (ringBond b)(ring g1)(ring g2)
			(group g1)(group g2)
			(mol b g1)(mol b g2))
		(= g1 g2)))
		
/*******************************************************************************/
(cl-comment '========== MOST_RINGBOND DEFINITIONS ==========')
/*******************************************************************************/

(cl-comment 'Definitions for ringBond')
(forall (b)
	(iff (ringBond b)
			(and (bond b)
				(exists (a1 a2)
					(and (atom a1)(atom a2)(mol a1 b)(mol a2 b)
				(not (exists (a3)
					(and (atom a3)
						(or (between a3 a1 a2)(between a1 a2 a3))))))))))

/*******************************************************************************/
(cl-comment '======= SEMANTIC CONDITION: semilinear betweenness / spanning tree')
/*******************************************************************************/

(forall (x y z)
	(if (between x y z)
		(and (atom x)(atom y)(atom z))))

(cl-comment 'Axioms from between/semilinear theory with sort constraints.')
(forall (x y z)
	(if	(between x y z)
		(between z y x)))

(forall (x y z)
	(if (and (between y x z)(between x y z))
		(= x y)))
		
(forall (x y z w)
	(if	(between y x z)
		(or	(between y x w)
			(between z x w))))

/*******************************************************************************/
(cl-comment '======= SEMANTIC CONDITION: skeletons')
/*******************************************************************************/

(cl-comment 'A skeleton contains a functional group.')
(forall (s)
	(if	(skeleton s)
		(exists (g)
			(and	(group g)
				(mol g s)))))

(cl-comment 'Each functional group in a skeleton contains an atom that is in a bond with an atom in a different functional group in the skeleton.')
(forall (g1 s)
	(if	(and	(skeleton s)
			(group g1)
			(mol g1 s))
		(exists (a1 a2 b g2)
			(and	(atom a1)
				(atom a2)
				(bond b)
				(group g2)
				(not (= g1 g2))
				(mol a1 g1)
				(mol a2 g2)
				(mol a1 b)
				(mol a2 b)))))

(cl-comment 'Every group is in a skeleton.')
(forall (x)
	(if (group x)
		(exists (y)
			(and (skeleton y)(mol y x)))))

(cl-comment 'Every group is contained in a unique skeleton.')
(forall (x)
	(if (group x)
		(exists (y)
			(and (skeleton y)(mol y x)
				(not (exists (w)
					(and (skeleton w)(mol y w)(not (= w y)))))))))


(cl-comment 'what kind of incidence relations should we include?')							

/*******************************************************************************/
(cl-comment '========== MOST_SKELETON DEFINITIONS ==========')
/*******************************************************************************/

(cl-comment 'Scaffold Definition')
(forall (x)
	(iff (scaffold x)
		(and (skeleton x)
			(exists (r) (and (ring r)(mol r x)))
			(forall (g)
				(if (and (chain g)(mol g x))
					(exists (y z)
						(and (ring y)(ring z)
							(mol y x)(mol z x)
							(attached y g)
							(attached z g))))))))


(cl-comment 'Linear Skeleton Definition')
(forall (x)
	(iff (linearskeleton x)
		(and (skeleton x)
			(forall (g)
				(if (and (group g)(mol g x))
					(chain g))))))

(forall (x y)
	(iff (part x y)
		(and (skeleton x)
			(skeleton y)
			(forall (z)
				(if (mol z x)
					(mol z y))))))
(cl-comment 'apr21 comment by carmen do we need to do a sort on z? what is z??')
(cl-comment 'apr25 comment by carmen leave this as is since we will explore this later, may just be open')

)